// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Error = require("./Error.js");
var Utils = require("../Utils.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Loading = require("./Loading.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var DeleteButton = require("../components/DeleteButton.js");
var ReasonApollo = require("reason-apollo/lib/js/src/ReasonApollo.bs.js");
var PublishButton = require("../components/PublishButton.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var Graphql_error = Caml_exceptions.create("DetailPage.GetPost.Graphql_error");

var query = "query PostQuery($id: ID!)  {\npost(id: $id)  {\nid  \ntitle  \ntext  \nisPublished  \n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["post"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0];
        var value$3 = value$2["id"];
        var match$3 = Js_json.decodeString(value$3);
        var tmp$2;
        if (match$3) {
          tmp$2 = match$3[0];
        } else {
          throw Graphql_error;
        }
        var value$4 = value$2["title"];
        var match$4 = Js_json.decodeString(value$4);
        var tmp$3;
        if (match$4) {
          tmp$3 = match$4[0];
        } else {
          throw Graphql_error;
        }
        var value$5 = value$2["text"];
        var match$5 = Js_json.decodeString(value$5);
        var tmp$4;
        if (match$5) {
          tmp$4 = match$5[0];
        } else {
          throw Graphql_error;
        }
        var value$6 = value$2["isPublished"];
        var match$6 = Js_json.decodeBoolean(value$6);
        var tmp$5;
        if (match$6) {
          tmp$5 = match$6[0];
        } else {
          throw Graphql_error;
        }
        tmp$1 = {
          id: tmp$2,
          title: tmp$3,
          text: tmp$4,
          isPublished: tmp$5
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            post: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_ID(value) {
  return value;
}

function make(id, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetPost = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_ID */json_of_ID,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetPostQuery = ReasonApollo.CreateQuery([
      query,
      parse
    ]);

var component = ReasonReact.statelessComponent("DetailPage");

function make$1(id, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var getPostQuery = make(id, /* () */0);
      return ReasonReact.element(/* None */0, /* None */0, Curry.app(GetPostQuery[/* make */3], [
                      /* Some */[getPostQuery.variables],
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      (function (param) {
                          var result = param[/* result */0];
                          if (typeof result === "number") {
                            if (result) {
                              return Utils.ste("No Data");
                            } else {
                              return ReasonReact.element(/* None */0, /* None */0, Loading.make(/* array */[]));
                            }
                          } else if (result.tag) {
                            var match = result[0].post;
                            if (match) {
                              var post = match[0];
                              var component = ReasonReact.element(/* None */0, /* None */0, PublishButton.make(id, /* array */[]));
                              var condition = +(post.isPublished === false);
                              return React.createElement("div", undefined, React.createElement("h1", {
                                              className: "f3 black-80 fw4 lh-solid"
                                            }, Utils.ste(post.title)), React.createElement("p", {
                                              className: "black-80 fw3"
                                            }, Utils.ste(post.text)), ReasonReact.element(/* None */0, /* None */0, DeleteButton.make(id, /* array */[])), condition ? component : null);
                            } else {
                              return Utils.ste("No Person Data");
                            }
                          } else {
                            console.log(result[0]);
                            return ReasonReact.element(/* None */0, /* None */0, $$Error.make(/* None */0, /* array */[]));
                          }
                        })
                    ]));
    });
  return newrecord;
}

exports.GetPost = GetPost;
exports.GetPostQuery = GetPostQuery;
exports.component = component;
exports.make = make$1;
/* GetPostQuery Not a pure module */
